protocols = imaps sieve

# Home directory is a per-user directory where Dovecot can save
# user-specific files (for virtual users).
mail_home = /var/mail/vmail/%d/%n

# Location for users' mailboxes.
#
# There are a few special variables you can use, eg.:
#
#   %u - username
#   %n - user part in user@domain, same as %u if there's no domain
#   %d - domain part in user@domain, empty if there's no domain
#   %h - home directory
#
mail_location = maildir:/var/mail/vmail/%d/%n/mail:LAYOUT=fs

# List of allowed characters in username. If the user-given username contains
# a character not listed in here, the login automatically fails. This is just
# an extra check to make sure user can't exploit any potential quote escaping
# vulnerabilities with SQL/LDAP databases. If you want to allow all characters,
# set this value to empty.
auth_username_chars = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890.-_@

# Allows plaintext authentication only when SSL/TLS is used first.
disable_plaintext_auth = yes

# SSL/TLS support: yes, no, required.
ssl = required

# SSL protocols to use.
ssl_protocols = TLSv1 TLSv1.1 TLSv1.2

# SSL ciphers to use.
ssl_cipher_list = ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AES:RSA+3DES:!ADH:!AECDH:!MD5:!DSS

# Directory and/or file for trusted SSL CA certificates. These are used
# only when Dovecot needs to act as an SSL client (e.g. imapc backend).
ssl_client_ca_dir = /etc/ssl/certs

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened
# before dropping root privileges, so keep the key file unreadable by
# anyone but root.
ssl_cert = </etc/ssl/private/ssl-chain-example-org.pem
ssl_key = </etc/ssl/private/ssl-key-decrypted-mail-example-org.key

# IMAP configuration.
protocol imap {

    # Maximum number of IMAP connections allowed for a user from each IP
    # address. NOTE: The username is compared case-sensitively.
    mail_max_userip_connections = 10

    # Workarounds for various client bugs:
    #   delay-newmail:
    #     Send EXISTS/RECENT new mail notifications only when replying
    #     to NOOP and CHECK commands. Some clients ignore them
    #     otherwise, for example OSX Mail (<v2.1). Outlook Express
    #     breaks more badly though, without this it may show user
    #     "Message no longer in server" errors. Note that OE6 still
    #     breaks even with this workaround if synchronization is set to
    #     "Headers Only".
    #   tb-extra-mailbox-sep:
    #     Thunderbird gets somehow confused with LAYOUT=fs (mbox and
    #     dbox) and adds extra '/' suffixes to mailbox names. This
    #     option causes Dovecot to ignore the extra '/' instead of
    #     treating it as invalid mailbox name.
    #   tb-lsub-flags:
    #     Show \Noselect flags for LSUB replies with LAYOUT=fs (e.g.
    #     mbox). This makes Thunderbird realize they aren't selectable
    #     and show them greyed out, instead of only later giving "not
    #     selectable" popup error.
    #
    # The list is space-separated.
    imap_client_workarounds = delay-newmail tb-extra-mailbox-sep
}

# LDA configuration.
protocol lda {

    # Address to use when sending rejection mails.
    postmaster_address = postmaster@example.org

    # Space separated list of plugins to load (default is global
    # mail_plugins).
    mail_plugins = sieve

    # If user is over quota, return with temporary failure instead of
    # bouncing the mail.
    quota_full_tempfail = yes

    # Format to use for logging mail deliveries. You can use variables:
    #  %$ - Delivery status message (e.g. "saved to INBOX")
    #  %m - Message-ID
    #  %s - Subject
    #  %f - From address
    #  %p - Physical size
    #  %w - Virtual size
    deliver_log_format = msgid=%m: %$

    # Human readable error message for rejection mails. You can use
    # variables:
    #    %n = CRLF, %r = reason, %s = original subject, %t = recipient
    rejection_reason = Your message to <%t> was automatically rejected:%n%r
}

plugin {
    # Settings for the Sieve interpreter.

    # The path to the user's main active script. If ManageSieve is used,
    # this the location of the symbolic link controlled by ManageSieve.
    sieve=~/.dovecot.sieve

    # Directory for :personal include scripts for the include extension.
    # This is also where the ManageSieve service stores the user's
    # scripts.
    sieve_dir=~/sieve

    # Path to a script file or a directory containing script files that
    # need to be executed before the user's script. If the path points
    # to a directory, all the Sieve scripts contained therein (with the
    # proper .sieve extension) are executed. The order of execution
    # within a directory is determined by the file names, using a normal
    # 8bit per-character comparison. Multiple script file or directory
    # paths can be specified by appending an increasing number.
    sieve_before = /var/mail/vmail/sieve-before

    # Identical to sieve_before, only the specified scripts are executed
    # after the user's script (only when keep is still in effect!).
    # Multiple script file or directory paths can be specified by
    # appending an increasing number.
    sieve_after = /var/mail/vmail/sieve-after
}

# Space separated list of wanted authentication mechanisms:
#   plain login digest-md5 cram-md5 ntlm rpa apop anonymous gssapi otp
#   skek gss-spnego
# NOTE: See also disable_plaintext_auth setting.
auth_mechanisms = plain login

userdb {
    # Static user database can be used when you want to use only single
    # UID and GID values for all users, and their home directories can
    # be specified with a simple template. 
    driver = static
    args = uid=5000 gid=5000 home=/var/mail/vmail/%d/%n

    # Unless your MTA already verifies that the user exists before
    # calling dovecot-lda, you'll most likely want dovecot-lda itself to
    # verify the user's existence. Since dovecot-lda looks up the user
    # only from the userdb, it of course doesn't work with static userdb
    # because there is no list of users. Normally static userdb handles
    # this by doing a passdb lookup instead.
}
 
passdb {
    # Authentication for passwd-file users.

    # The passdb backend name.
    #
    # passwd-file: passwd-like file with specified location
    driver = passwd-file

    # Arguments for the passdb backend. The format of this value depends
    # on the passdb driver. Each one uses different args.
    #
    # scheme=<s>: Allows you to specify the default password scheme. The
    #             default is CRYPT. This is available only for passdb.
    #
    # username_format=<s>: Look up usernames using this format instead
    #                      of the full username (%u). If you want to
    #                      enable user@domain logins but have only
    #                      "user" in the file, set this to %n.
    args = username_format=%u scheme=ssha512 /etc/dovecot/passwd.db

    # Users can be (temporarily) disabled by adding a passdb with
    # deny=yes. If the user is found from that database, authentication
    # will fail. The deny passdb should always be specified before
    # others, so it gets checked first.
    deny = no

    # By adding master=yes setting inside a passdb you make the passdb a
    # list of "master users", who can log in as anyone else.
    master = no

    # This is an alias for result_success = continue as described below.
    # This was commonly used together with master passdb to specify that
    # even after a successful master user authentication, the
    # authentication should continue to the actual non-master passdb to
    # lookup the user.
    pass = no

    # Do we sometimes want to skip over this passdb?
    # - never
    # - authenticated: Skip if an earlier passdb already authenticated the
    #                   user successfully.
    # - unauthenticated: Skip if user hasn't yet been successfully
    #                     authenticated by the previous passdbs.
    skip = never

    # What happens when we're finished with this passdb. Result values:
    #
    # - return-ok: Return success, don't continue to the next passdb.
    # - return-fail: Return failure, don't continue to the next passdb.
    # - return: Return earlier passdb's success or failure, don't
    #           continue to the next passdb. If this was the first
    #           passdb, return failure.
    # - continue-ok: Set the current authentication state to success,
    #                and continue to the next passdb.
    # - continue-fail: Set the current authentication state to failure,
    #                  and continue to the next passdb.
    # - continue: Continue to the next passdb without changing the
    #             authentication state. The initial state is failure.
    #

    # What to do if authentication failed (default: continue)
    result_failure = continue

    # What to do if the passdb lookup had an internal failure (default:
    # continue). If any of the passdbs had an internal failure and the
    # final passdb also returns "continue", the authentication will fail
    # with "internal error".
    result_internalfail = continue

    # What to do if the authentication succeeded (default: return-ok)
    result_success = return-ok
}
 
service auth {
    # Postfix smtp-auth
    unix_listener /var/spool/postfix/private/dovecot-auth {
        mode = 0660
        user = postfix
        group = postfix
    }
}

# Log unsuccessful authentication attempts and reasons why they failed.
auth_verbose=yes

# Even more verbose logging for debugging purposes.
#auth_debug=yes
